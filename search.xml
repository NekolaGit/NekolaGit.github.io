<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring</title>
      <link href="/2019/11/25/spring/"/>
      <url>/2019/11/25/spring/</url>
      
        <content type="html"><![CDATA[<h1 id="一、理解内聚和耦合"><a href="#一、理解内聚和耦合" class="headerlink" title="一、理解内聚和耦合"></a>一、理解内聚和耦合</h1><p>优秀的框架标准:<br>    <strong><em>可维护性好，可扩展性好</em></strong></p><p>高内聚：尽量将模块中功能的代码写在一起<br>低耦合：减少类与类之间的依赖</p><h1 id="二、Spring概述"><a href="#二、Spring概述" class="headerlink" title="二、Spring概述"></a>二、Spring概述</h1><h2 id="1-Spring是什么"><a href="#1-Spring是什么" class="headerlink" title="1.Spring是什么"></a>1.Spring是什么</h2><p>Spring是一个JavaEE轻量级的一站式开发框架</p><ul><li>轻量级：使用最少代码启动框架，然后根据你的需求选择，选择你喜欢的模块使用。</li><li>一站式：提供了表示层，服务层，持久层的所有支持。</li></ul><h2 id="2-为什么要用Spring"><a href="#2-为什么要用Spring" class="headerlink" title="2.为什么要用Spring"></a>2.为什么要用Spring</h2><ul><li>Spring可帮助我们管理软件开发过程中的对象，以及如何创建和维护对象之间的关系</li><li>Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器框架，可以将组件的耦合度降至最低，即实现解耦，便于系统以后的维护和升级</li></ul><h2 id="3-Spring框架jar包"><a href="#3-Spring框架jar包" class="headerlink" title="3.Spring框架jar包"></a>3.Spring框架jar包</h2><h1 id="三、入门例子"><a href="#三、入门例子" class="headerlink" title="三、入门例子"></a>三、入门例子</h1><h2 id="1-配置步骤说明"><a href="#1-配置步骤说明" class="headerlink" title="1.配置步骤说明"></a>1.配置步骤说明</h2><ul><li>添加依赖</li><li>创建一个普通的类</li><li>创建一个Spring配置文件（通过xsd规则生成）</li><li>编写一个测试累，使用ApplicationContext的子类对象根据配置文件创建容器，并在容器内获得创建的对象</li></ul><h2 id="2-配置步骤"><a href="#2-配置步骤" class="headerlink" title="2.配置步骤"></a>2.配置步骤</h2><h3 id="2-1-第一步：搭建环境"><a href="#2-1-第一步：搭建环境" class="headerlink" title="2.1 第一步：搭建环境"></a>2.1 第一步：搭建环境</h3><ol><li>创建一个Maven项目</li><li>加入所需依赖<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h3 id="2-2-第二步：创建配置文件"><a href="#2-2-第二步：创建配置文件" class="headerlink" title="2.2 第二步：创建配置文件"></a>2.2 第二步：创建配置文件</h3><h3 id="2-3-第三步：创建对象到容器里面"><a href="#2-3-第三步：创建对象到容器里面" class="headerlink" title="2.3 第三步：创建对象到容器里面"></a>2.3 第三步：创建对象到容器里面</h3></li></ol><ul><li>创建一个类<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloService</span>  <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--你好世界！--"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>applicationContext.xml配置文件加入配置<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml  version="1.0"  encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>   <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--      bean:代表SpringIOC容器中的一个类      class:改类的全类名  --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itdfbz.Service.HelloService<span class="token punctuation">"</span></span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>helloService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></li><li>测试使用getBean获得容器中的对象</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>itdfbz<span class="token punctuation">.</span>spring<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>itdfbz<span class="token punctuation">.</span>Service<span class="token punctuation">.</span>HelloService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSpring01</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//获取SpringIOC容器</span>        ApplicationContext  app<span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"application.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据name/id获取</span>        HelloService  helloService  <span class="token operator">=</span>  <span class="token punctuation">(</span>HelloService<span class="token punctuation">)</span>  app<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"helloService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据字节码对象获取</span>        <span class="token comment" spellcheck="true">//HelloService  helloService  =  app.getBean(HelloService.class);</span>        helloService<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="四、Spring容器"><a href="#四、Spring容器" class="headerlink" title="四、Spring容器"></a>四、Spring容器</h1><h2 id="4-1-Spring核心容器"><a href="#4-1-Spring核心容器" class="headerlink" title="4.1 Spring核心容器"></a>4.1 Spring核心容器</h2><p>核心容器是spring框架的核心，用户编写的程序文件发布到服务器后，由spring负责管理，包含对象的初始化、函数的调用、对象的消亡等等，因此可以将spring看作是服务器与应用程序的中间管理组件</p><h2 id="4-2容器的实例化"><a href="#4-2容器的实例化" class="headerlink" title="4.2容器的实例化"></a>4.2容器的实例化</h2><p>在Spring容器读取Bean配置创建Bean市里之前，必须对它进行实例化。只有在容器实例化后，才可以从容器里获取Bean实例并使用。</p><p>Spring提供了多种类型容器实现</p><ul><li>BeanFactory：容器的基本实现</li><li>ApplicationContext：提供了更多的高级特性，BeanFactory的子接口。</li></ul><p>BeanFactory是Spring框架的基础设施，面相Spring本身；ApplicationContext面向使用Spring框架的开发者，几乎所有应用场合都直接使用ApplicationContext而非底层的BeanFactory。</p><p>无论使用何种方式，配置文件都是相同的。</p><p>ConfigurableApplicationContext扩展与ApplicationContext，新增加两个主要方法：refresh()和close()，让ApplicationContext具有启动、刷新和关闭上下文的能力。</p><p>ClassPathXmlApplicationContext：通过classpath路径直接获得加载的xml文件（推荐使用）</p><p>FileSystemXmlApplicationContext：通过文件路径来获得加载的xml文件</p><p style="background:yellow">注意:ApplicationContext在初始化上下文时就实例化所有单例的Bean</p><h1 id="六、基于Sprin框架的IoC实现"><a href="#六、基于Sprin框架的IoC实现" class="headerlink" title="六、基于Sprin框架的IoC实现"></a>六、基于Sprin框架的IoC实现</h1><h2 id="1-需求"><a href="#1-需求" class="headerlink" title="1.需求"></a>1.需求</h2><p>CustomerClient调用CustomerService的save()方法，将调用CustomerServiceImpl的对象实现的save()切换成调用CustomerServiceImpl2对象实现的save()。</p><p style="background:yellow">注意：重点观察CustomerClient，切换过程中有没有修改该类的代码。</p><p>如果将CustomerClient调用的CustomerServiceImpl的对象修改CustomerClient的代码。那么说明代码调用</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/11/25/hello-world/"/>
      <url>/2019/11/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
